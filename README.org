#+TITLE: DocDB in a Docker Container

* Goals

 - [ ] automated creation of DocDB application including configured Apache and MySQL in Docker containers
 - [ ] isolation between generic code and application-specifics
 - [ ] MySQL and Apache servers separate from DB and document storage
 - [ ] no stored authentication tokens in the installation script
 - [ ] retain connection to DocDB source for later update/development

* Containers:

For any installations there are these /types/ of containers:

 - daemons :: runs the MySQL, Apache and SSH daemons
 - storage :: provides the MySQL and DocDB code and document storage (and an SSHd)

Note: this bundling of all daemons into one image violates Docker best practices.  Maybe this will be refactored in the future.

* Operation

** Building images

To build the initial images:

#+BEGIN_EXAMPLE
  $ ./build.sh <namespace>
#+END_EXAMPLE

The =<namespace>= is used to allow for multiple DocDB's running on the same Docker host.  It produces images named like =<namespace>/<type>= where =<type>= is =daemons= or =storage=.

** Running the containers

To start the containers run:

#+BEGIN_EXAMPLE
  $ ./start.sh <namespace>
#+END_EXAMPLE

The containers will be given the =<namespace>_<type>=.

The =daemons= container must be run with the =storage= container linked in.

Each time the =deamons= container is run it executes the script [[./docdb-storage/install_docdb.py]] provided by the =storage= image.  This script runs in an idempotent fashion so that changes are not overwritten.  It will warn if it detects such potential changes.  The results of a run is saved to an =installation.json= file in =/var/lib/docdb/installation= and if found it will be used to drive the next run.  

